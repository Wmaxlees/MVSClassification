/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ucdenver.UI;

import edu.ucdenver.Misc.GlobalConfig;
import edu.ucdenver.Misc.UtilityClass;

import edu.ucdenver.ExecuteExperiment;
import jdk.nashorn.internal.objects.Global;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Siddhant Kulkarni
 */
public class MainWindowAttemptOne extends javax.swing.JFrame {

    public double tp_FeatureBased = 10, tp_SimilarityBased = 20, tp_PatternBased = 30;
    public double fp_FeatureBased = 10, fp_SimilarityBased = 20, fp_PatternBased = 30;
    public double tn_FeatureBased = 10, tn_SimilarityBased = 20, tn_PatternBased = 30;
    public double fn_FeatureBased = 10, fn_SimilarityBased = 20, fn_PatternBased = 30;
    public double memory_FeatureBased = 10, memory_SimilarityBased = 20, memory_PatternBased = 30;
    public double trainingTime_FeatureBased = 10, trainingTime_SimilarityBased = 20, trainingTime_PatternBased = 30;
    public double testingTime_FeatureBased = 10, testingTime_SimilarityBased = 20, testingTime_PatternBased = 30;

    /**
     * Creates new form MainWindowAttemptOne
     */
    public MainWindowAttemptOne() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jTxtTestingFolder = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jCBFeatureBased = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        jCBTimeSeries = new javax.swing.JCheckBox();
        jCBPatternMining = new javax.swing.JCheckBox();
        jCBHorizontalRange = new javax.swing.JCheckBox();
        jCBVerticalRange = new javax.swing.JCheckBox();
        jCBMean = new javax.swing.JCheckBox();
        jCBStdDev = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        rdBtnFeatureED = new javax.swing.JRadioButton();
        rdBtnFeatureManhattan = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        rdBtnTimeSeriesED = new javax.swing.JRadioButton();
        rdBtnTimeSeriesDTW = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        rdBtnTimeSeriesFirstN = new javax.swing.JRadioButton();
        rdBtnTimeSeriesLastN = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTxtGridX = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTxtGridY = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTxtGridZ = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel22 = new javax.swing.JLabel();
        jCBAccuracy = new javax.swing.JCheckBox();
        jCBMemReq = new javax.swing.JCheckBox();
        jCBTimeReqTrain = new javax.swing.JCheckBox();
        jCBTimeReqTest = new javax.swing.JCheckBox();
        jbtnExportResult = new javax.swing.JButton();
        jTxtWindowSize = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jTxtNumIndividualsTrain = new javax.swing.JTextField();
        jTxtNumInstances = new javax.swing.JTextField();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        jTxtNumIndividualsTest = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jtxtOutputFilePath = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jBtnExecuteExperiment = new javax.swing.JButton();
        btnViewAccuracy = new javax.swing.JButton();
        btnViewTime = new javax.swing.JButton();
        btnViewMem = new javax.swing.JButton();
        jbtnExportConfiguration = new javax.swing.JButton();
        jbtnImportConfiguration = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jTxtFrameStepRate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLstSelSeries = new javax.swing.JList<String>();
        jLabel31 = new javax.swing.JLabel();
        jtxtNumSeries = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jTxtMinSup = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocationByPlatform(true);
        setName("MainWindow"); // NOI18N
        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel1.setText("MVSBench");

        jLabel2.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        jLabel2.setText("Dataset Path:");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel4.setText("Select features to be included:");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jCBFeatureBased.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jCBFeatureBased.setSelected(true);
        jCBFeatureBased.setText("Feature Based Identification");
        jCBFeatureBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBFeatureBasedActionPerformed(evt);
            }
        });

        jCBTimeSeries.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jCBTimeSeries.setSelected(true);
        jCBTimeSeries.setText("Time Series Similarity Based Identification");
        jCBTimeSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBTimeSeriesActionPerformed(evt);
            }
        });

        jCBPatternMining.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jCBPatternMining.setSelected(true);
        jCBPatternMining.setText("Unique Frequent Pattern Mining Based Identification");
        jCBPatternMining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBPatternMiningActionPerformed(evt);
            }
        });

        jCBHorizontalRange.setSelected(true);
        jCBHorizontalRange.setText("Horizontal Range");
        jCBHorizontalRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBHorizontalRangeActionPerformed(evt);
            }
        });

        jCBVerticalRange.setSelected(true);
        jCBVerticalRange.setText("Vertical Range");
        jCBVerticalRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBVerticalRangeActionPerformed(evt);
            }
        });

        jCBMean.setSelected(true);
        jCBMean.setText("Mean Deviation of all the data points");
        jCBMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBMeanActionPerformed(evt);
            }
        });

        jCBStdDev.setSelected(true);
        jCBStdDev.setText("Standard Deviation of all the data points presented in data");
        jCBStdDev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBStdDevActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel7.setText("Select Similarity Measure:");

        rdBtnFeatureED.setSelected(true);
        rdBtnFeatureED.setText("Euclidean Distance");
        rdBtnFeatureED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnFeatureEDActionPerformed(evt);
            }
        });

        rdBtnFeatureManhattan.setText("Manhattan Distance");
        rdBtnFeatureManhattan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnFeatureManhattanActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel8.setText("Select Similarity Measure:");

        rdBtnTimeSeriesED.setSelected(true);
        rdBtnTimeSeriesED.setText("Euclidean Distance");
        rdBtnTimeSeriesED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnTimeSeriesEDActionPerformed(evt);
            }
        });

        rdBtnTimeSeriesDTW.setText("Dynamic Time Warping");
        rdBtnTimeSeriesDTW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnTimeSeriesDTWActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel9.setText("If Euclidean Distance is selected, choose whether to match first or last N frames:");

        rdBtnTimeSeriesFirstN.setSelected(true);
        rdBtnTimeSeriesFirstN.setText("First N frames");
        rdBtnTimeSeriesFirstN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnTimeSeriesFirstNActionPerformed(evt);
            }
        });

        rdBtnTimeSeriesLastN.setText("Last N Frames");
        rdBtnTimeSeriesLastN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtnTimeSeriesLastNActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel10.setText("Size of Sliding window:");

        jLabel13.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel13.setText("(frames)");

        jLabel14.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel14.setText("Note: Here, N is  minimum number of frames of 2 instances being compared");

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel15.setText("Grid Divisions:");

        jLabel16.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel16.setText("X:");

        jLabel17.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel17.setText("Y:");

        jLabel18.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel18.setText("Z:");

        jTxtGridX.setText("10");

        jLabel19.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel19.setText("(blocks)");

        jTxtGridY.setText("10");

        jLabel20.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel20.setText("(blocks)");

        jTxtGridZ.setText("10");

        jLabel21.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel21.setText("(blocks)");

        jLabel22.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        jLabel22.setText("Evaluation Parameters:");

        jCBAccuracy.setSelected(true);
        jCBAccuracy.setText("Accuracy");
        jCBAccuracy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAccuracyActionPerformed(evt);
            }
        });

        jCBMemReq.setSelected(true);
        jCBMemReq.setText("Memory Required to store Learning Model");
        jCBMemReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBMemReqActionPerformed(evt);
            }
        });

        jCBTimeReqTrain.setSelected(true);
        jCBTimeReqTrain.setText("Time required for training");
        jCBTimeReqTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBTimeReqTrainActionPerformed(evt);
            }
        });

        jCBTimeReqTest.setSelected(true);
        jCBTimeReqTest.setText("Time required for testing");
        jCBTimeReqTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBTimeReqTestActionPerformed(evt);
            }
        });

        jbtnExportResult.setText("Export Results");
        jbtnExportResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnExportResultActionPerformed(evt);
            }
        });

        jTxtWindowSize.setText("20");

        jLabel23.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel23.setText("Number of objects for training:");

        jLabel24.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel24.setText("Number of instances per object for training:");

        jTxtNumIndividualsTrain.setText("10");

        jTxtNumInstances.setText("2");

        jLabel25.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel25.setText("Number of objects for testing:");

        jTxtNumIndividualsTest.setText("2");

        jLabel26.setFont(new java.awt.Font("Calibri", 2, 18)); // NOI18N
        jLabel26.setText("Dataset Configurations:");

        jLabel27.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel27.setText("File Path:");

        jBtnExecuteExperiment.setText("Execute Experiment");
        jBtnExecuteExperiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExecuteExperimentActionPerformed(evt);
            }
        });

        btnViewAccuracy.setText("View Accuracy");
        btnViewAccuracy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAccuracyActionPerformed(evt);
            }
        });

        btnViewTime.setText("View Time Req");
        btnViewTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTimeActionPerformed(evt);
            }
        });

        btnViewMem.setText("View Memory Req");
        btnViewMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMemActionPerformed(evt);
            }
        });

        jbtnExportConfiguration.setText("Export GlobalConfig");
        jbtnExportConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnExportConfigurationActionPerformed(evt);
            }
        });

        jbtnImportConfiguration.setText("Import GlobalConfig");
        jbtnImportConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnImportConfigurationActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel28.setText("Frame window step rate:");

        jTxtFrameStepRate.setText("1");

        jLstSelSeries.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Series 1", "Series 2", "Series 3", "Series 4", "Series 5", "Series 6", "Series 7", "Series 8", "Series 9", "Series 10", "Series 11", "Series 12", "Series 13", "Series 14", "Series 15" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jLstSelSeries.setSelectedIndices(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14});
        jLstSelSeries.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLstSelSeriesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jLstSelSeries);

        jLabel31.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel31.setText("Total Number of Series:");

        jtxtNumSeries.setText("15");
        jtxtNumSeries.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtNumSeriesFocusLost(evt);
            }
        });
        jtxtNumSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtNumSeriesActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel32.setText("*NOTE: Please press CTRL and click on the series you want unselected");

        jLabel29.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel29.setText("MinSupport:");

        jTxtMinSup.setText("10");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel25)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jTxtNumIndividualsTest, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel23)
                                            .addGap(18, 18, 18)
                                            .addComponent(jTxtNumIndividualsTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(274, 274, 274)
                                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel24)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jTxtNumInstances, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(113, 113, 113)
                                                .addComponent(jTxtFrameStepRate, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel31)
                                                .addGap(41, 41, 41)
                                                .addComponent(jtxtNumSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTxtTestingFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jCBFeatureBased))
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jCBPatternMining))
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel4))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCBStdDev)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(rdBtnFeatureED)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rdBtnFeatureManhattan))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jCBHorizontalRange)
                                                    .addComponent(jCBMean))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jCBVerticalRange)
                                                .addGap(26, 26, 26)))))
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel7))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(33, 33, 33)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel10)
                                                .addComponent(jLabel29))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jTxtWindowSize, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel13))
                                                .addComponent(jTxtMinSup, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel15)
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jTxtGridY, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel20))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jTxtGridZ, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel21))))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel16)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jTxtGridX, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jLabel19)))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(btnViewAccuracy)
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBtnExecuteExperiment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewMem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(29, 29, 29)
                                .addComponent(btnViewTime)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(48, 48, 48)
                                    .addComponent(rdBtnTimeSeriesED)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rdBtnTimeSeriesDTW))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(51, 51, 51)
                                    .addComponent(rdBtnTimeSeriesFirstN)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rdBtnTimeSeriesLastN)
                                    .addGap(48, 48, 48))
                                .addComponent(jCBTimeSeries)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(24, 24, 24)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel14)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(98, 98, 98)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel22)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jCBAccuracy)
                                                .addComponent(jCBMemReq)
                                                .addComponent(jCBTimeReqTrain)
                                                .addComponent(jCBTimeReqTest)))))
                                .addComponent(jSeparator5)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel27)
                                    .addGap(41, 41, 41)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jbtnExportResult)
                                            .addGap(18, 18, 18)
                                            .addComponent(jbtnExportConfiguration)
                                            .addGap(18, 18, 18)
                                            .addComponent(jbtnImportConfiguration))
                                        .addComponent(jtxtOutputFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(31, 31, 31)))
                            .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(458, 458, 458)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTxtTestingFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel32))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(jTxtNumIndividualsTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31)
                            .addComponent(jtxtNumSeries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jTxtNumIndividualsTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTxtFrameStepRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel24))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTxtNumInstances, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCBFeatureBased)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCBHorizontalRange)
                                    .addComponent(jCBVerticalRange))
                                .addGap(18, 18, 18)
                                .addComponent(jCBMean)
                                .addGap(18, 18, 18)
                                .addComponent(jCBStdDev)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdBtnFeatureED)
                                    .addComponent(rdBtnFeatureManhattan)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCBTimeSeries)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdBtnTimeSeriesED)
                                    .addComponent(rdBtnTimeSeriesDTW))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdBtnTimeSeriesFirstN)
                                    .addComponent(rdBtnTimeSeriesLastN))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBAccuracy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBMemReq)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBTimeReqTrain)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBTimeReqTest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jtxtOutputFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel27)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCBPatternMining)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTxtWindowSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel13))
                                    .addComponent(jLabel10))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTxtMinSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel29))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel16)
                                            .addComponent(jTxtGridX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel19))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel17)
                                            .addComponent(jTxtGridY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel20))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel18)
                                            .addComponent(jTxtGridZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel21))))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnExecuteExperiment)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnViewMem)
                                        .addComponent(btnViewTime))
                                    .addComponent(btnViewAccuracy))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jbtnExportResult)
                                .addComponent(jbtnExportConfiguration)
                                .addComponent(jbtnImportConfiguration)))
                        .addContainerGap())
                    .addComponent(jSeparator3)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowStateChanged

    public void timeCBClicked() {
        // TODO add your handling code here:
        if (!jCBTimeReqTest.isSelected() && !jCBTimeReqTrain.isSelected()) {
            btnViewTime.setEnabled(false);
        } else {
            btnViewTime.setEnabled(true);
        }
    }
    private void jCBTimeReqTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBTimeReqTrainActionPerformed
        timeCBClicked();
    }//GEN-LAST:event_jCBTimeReqTrainActionPerformed
    public void timeTestCBClicked() {
        // TODO add your handling code here:
        if (!jCBTimeReqTest.isSelected() && !jCBTimeReqTrain.isSelected()) {
            btnViewTime.setEnabled(false);
        } else {
            btnViewTime.setEnabled(true);
        }
    }
    private void jCBTimeReqTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBTimeReqTestActionPerformed
        timeTestCBClicked();
    }//GEN-LAST:event_jCBTimeReqTestActionPerformed

    private void btnViewAccuracyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAccuracyActionPerformed
        /*     EvaluationParameters eval;
        EvaluationParameters[] objs = new EvaluationParameters[3];
        objs[0] = new EvaluationParameters(50, 20, 20, 10, 40, 20, 20, "Feature based");
        objs[1] = new EvaluationParameters(40, 15, 30, 05, 10, 40, 100, "Similarity based");
        objs[2] = new EvaluationParameters(50, 05, 35, 10, 20, 70, 55, "Pattern based");
        UtilityClass.createAndDisplayBarGraph("Accuracy Graph", "Accuracy(TP,FP,TN,FN)", "Approach", "Accuracy", objs, ParamTypeEnum.ACCURACY);*/
    }//GEN-LAST:event_btnViewAccuracyActionPerformed

    private void btnViewTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTimeActionPerformed
        /*// TODO add your handling code here:
        EvaluationParameters[] objs = new EvaluationParameters[3];
        objs[0] = new EvaluationParameters(50, 20, 20, 10, 40, 20, 20, "Feature based");
        objs[1] = new EvaluationParameters(40, 15, 30, 05, 10, 40, 100, "Similarity based");
        objs[2] = new EvaluationParameters(50, 05, 35, 10, 20, 70, 55, "Pattern based");
        UtilityClass.createAndDisplayBarGraph("Time Required", "Time(Training,Testing)", "Approach", "Time Required(sec)", objs, ParamTypeEnum.TRAININGTIME);*/
    }//GEN-LAST:event_btnViewTimeActionPerformed

    private void btnViewMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMemActionPerformed
        // TODO add your handling code here:
        /*EvaluationParameters[] objs = new EvaluationParameters[3];
        objs[0] = new EvaluationParameters(50, 20, 20, 10, 40, 20, 20, "Feature based");
        objs[1] = new EvaluationParameters(40, 15, 30, 05, 10, 40, 100, "Similarity based");
        objs[2] = new EvaluationParameters(50, 05, 35, 10, 20, 70, 55, "Pattern based");
        UtilityClass.createAndDisplayBarGraph("Memory graph", "Memory", "Approach", "Memory(MB)", objs, ParamTypeEnum.MEMORY);
         */
    }//GEN-LAST:event_btnViewMemActionPerformed

    private boolean validateUI() {
        //validations
        if (jTxtTestingFolder.getText().trim().length() == 0) {
            UtilityClass.displaySimpleMessageBox("Dataset path cannot be empty!");
            return false;
        } else {
            GlobalConfig.getInstance().setString("DatasetPath", jTxtTestingFolder.getText());
        }
        try {
            GlobalConfig.numberOfInstancesPerIndividual = Integer.parseInt(jTxtNumInstances.getText());
            GlobalConfig.extraParameters.put("Instances", GlobalConfig.numberOfInstancesPerIndividual);

            GlobalConfig.getInstance().setInt("TrainingSetSize", Integer.parseInt(jTxtNumIndividualsTrain.getText()));
            GlobalConfig.getInstance().setInt("TestingSetSize", Integer.parseInt(jTxtNumIndividualsTest.getText()));

            GlobalConfig.frameStepRate = Integer.parseInt(jTxtFrameStepRate.getText());
            GlobalConfig.extraParameters.put("FrameStepRate", GlobalConfig.frameStepRate);
            int[] selArr = jLstSelSeries.getSelectedIndices();
            String tempSeries="";
            for (int i : selArr) {
                // GlobalConfig.selectedSeries.add(i);
                tempSeries+=i+"-";
            }
            tempSeries=tempSeries.substring(0, tempSeries.length()-1);
            GlobalConfig.extraParameters.put("SeriesToConsider",tempSeries);
            if (GlobalConfig.getInstance().getInt("TestingSetSize") > GlobalConfig.getInstance().getInt("TrainingSetSize")) {
                UtilityClass.displaySimpleMessageBox("Number of individuals for testing must be less than for training!");
                return false;
            }

        } catch (Exception ex) {
            UtilityClass.displaySimpleMessageBox("All values in Dataset configuration section must be valid numbers!");
            return false;
        }

//        if (jCBFeatureBased.isSelected()) {
//            GlobalConfig.approaches.add(new FeatureBased());
//            if (!jCBHorizontalRange.isSelected() && !jCBVerticalRange.isSelected() && !jCBMean.isSelected()
//                    && !jCBStdDev.isSelected()) {
//                UtilityClass.displaySimpleMessageBox("You must select at least one feature to be used for feature based classification!");
//                return false;
//            }
//            if (jCBHorizontalRange.isSelected()) {
//                GlobalConfig.extraParameters.put("IsHorizontalRangeSelected", "TRUE");
//            } else {
//                GlobalConfig.extraParameters.put("IsHorizontalRangeSelected", "FALSE");
//            }
//            if (jCBVerticalRange.isSelected()) {
//                GlobalConfig.extraParameters.put("IsVerticalRangeSelected", "TRUE");
//            } else {
//                GlobalConfig.extraParameters.put("IsVerticalRangeSelected", "FALSE");
//            }
//            if (jCBMean.isSelected()) {
//                GlobalConfig.extraParameters.put("IsMeanSelected", "TRUE");
//            } else {
//                GlobalConfig.extraParameters.put("IsMeanSelected", "FALSE");
//            }
//            if (jCBStdDev.isSelected()) {
//                GlobalConfig.extraParameters.put("IsStdDevSelected", "TRUE");
//            } else {
//                GlobalConfig.extraParameters.put("IsStdDevSelected", "FALSE");
//            }
//
//        }
        try {
            GlobalConfig.sizeOfWindow = Integer.parseInt(jTxtWindowSize.getText());
            GlobalConfig.extraParameters.put("SlidingWinSize", GlobalConfig.sizeOfWindow);
            GlobalConfig.x = Integer.parseInt(jTxtGridX.getText());
            GlobalConfig.extraParameters.put("X", GlobalConfig.x);
            GlobalConfig.y = Integer.parseInt(jTxtGridY.getText());
            GlobalConfig.extraParameters.put("Y", GlobalConfig.y);
            GlobalConfig.z = Integer.parseInt(jTxtGridZ.getText());
            GlobalConfig.extraParameters.put("Z", GlobalConfig.z);
            
            if (rdBtnFeatureED.isSelected()) {
                GlobalConfig.extraParameters.put("IsEDSelectedForFeatureBased", "TRUE");
            } else {
                GlobalConfig.extraParameters.put("IsEDSelectedForFeatureBased", "FALSE");
            }

        } catch (Exception ex) {

            UtilityClass.displaySimpleMessageBox("All Frequent Pattern Mining paramenters must be valid integers!");
            return false;
        }

//        if (jCBPatternMining.isSelected()) {
//            GlobalConfig.approaches.add(new FrequentPatternBased());
//        }
//
//        if (jCBTimeSeries.isSelected()) {
//            GlobalConfig.approaches.add(new TimeSeriesSimilarity());
//        }

        if (!jCBFeatureBased.isSelected() && !jCBPatternMining.isSelected() && !jCBTimeSeries.isSelected()) {
            UtilityClass.displaySimpleMessageBox("You must choose at least one approach to execute experiemnt!");
            return false;
        }

        if (rdBtnTimeSeriesED.isSelected()) {
            GlobalConfig.extraParameters.put("IsEDSelectedForTimeSeries", "TRUE");
        } else {
            GlobalConfig.extraParameters.put("IsEDSelectedForTimeSeries", "FALSE");
        }

        if (rdBtnTimeSeriesFirstN.isSelected()) {
            GlobalConfig.extraParameters.put("IsFirstNSelectedForTimeSeries", "TRUE");
        } else {
            GlobalConfig.extraParameters.put("IsFirstNSelectedForTimeSeries", "FALSE");
        }

        return true;
    }

    private void jBtnExecuteExperimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExecuteExperimentActionPerformed
        // TODO add your handling code here:
        if (!validateUI()) {
            return;
        }
        try {
            ExecuteExperiment.executeExperiments();
            UtilityClass.displaySimpleMessageBox("Execution Completed!");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_jBtnExecuteExperimentActionPerformed

    public void featureBasedCBClicked() 
    {
        // TODO add your handling code here:
        if (!jCBFeatureBased.isSelected()) {
            
            jCBHorizontalRange.setEnabled(false);
            jCBVerticalRange.setEnabled(false);
            jCBMean.setEnabled(false);

            jCBStdDev.setEnabled(false);
            rdBtnFeatureED.setEnabled(false);
            rdBtnFeatureManhattan.setEnabled(false);
            
        } else {

            jCBHorizontalRange.setEnabled(true);
            jCBVerticalRange.setEnabled(true);
            jCBMean.setEnabled(true);

            jCBStdDev.setEnabled(true);
            rdBtnFeatureED.setEnabled(true);
            rdBtnFeatureManhattan.setEnabled(true);
        }
    }
    private void jCBFeatureBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBFeatureBasedActionPerformed
        featureBasedCBClicked();
    }//GEN-LAST:event_jCBFeatureBasedActionPerformed

    private void rdBtnFeatureEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnFeatureEDActionPerformed
        // TODO add your handling code here:
        rdBtnFeatureManhattan.setSelected(false);
        rdBtnFeatureED.setSelected(true);
    }//GEN-LAST:event_rdBtnFeatureEDActionPerformed

    private void rdBtnFeatureManhattanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnFeatureManhattanActionPerformed
        // TODO add your handling code here:
        rdBtnFeatureED.setSelected(false);
        rdBtnFeatureManhattan.setSelected(true);
    }//GEN-LAST:event_rdBtnFeatureManhattanActionPerformed

    public void timeSeriesCBClicked() {

        if (!jCBTimeSeries.isSelected()) {
            rdBtnTimeSeriesDTW.setEnabled(false);
            rdBtnTimeSeriesED.setEnabled(false);
            rdBtnTimeSeriesFirstN.setEnabled(false);
            rdBtnTimeSeriesLastN.setEnabled(false);
        } else {
            rdBtnTimeSeriesDTW.setEnabled(true);
            rdBtnTimeSeriesED.setEnabled(true);
            rdBtnTimeSeriesFirstN.setEnabled(true);
            rdBtnTimeSeriesLastN.setEnabled(true);
        }
    }
    private void jCBTimeSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBTimeSeriesActionPerformed
        // TODO add your handling code here:
        timeSeriesCBClicked();
    }//GEN-LAST:event_jCBTimeSeriesActionPerformed

    public void edRdbClicked() {
        // TODO add your handling code here:
        rdBtnTimeSeriesED.setSelected(true);
        rdBtnTimeSeriesDTW.setSelected(false);

        rdBtnTimeSeriesFirstN.setEnabled(true);
        rdBtnTimeSeriesLastN.setEnabled(true);
    }
    private void rdBtnTimeSeriesEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnTimeSeriesEDActionPerformed
        edRdbClicked();
    }//GEN-LAST:event_rdBtnTimeSeriesEDActionPerformed

    public void dtwRdbClicked() {
        // TODO add your handling code here:
        rdBtnTimeSeriesED.setSelected(false);
        rdBtnTimeSeriesDTW.setSelected(true);
        rdBtnTimeSeriesFirstN.setEnabled(false);
        rdBtnTimeSeriesLastN.setEnabled(false);
    }
    private void rdBtnTimeSeriesDTWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnTimeSeriesDTWActionPerformed
        dtwRdbClicked();
    }//GEN-LAST:event_rdBtnTimeSeriesDTWActionPerformed

    private void rdBtnTimeSeriesFirstNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnTimeSeriesFirstNActionPerformed
        // TODO add your handling code here:
        rdBtnTimeSeriesLastN.setSelected(false);
        rdBtnTimeSeriesFirstN.setSelected(true);
    }//GEN-LAST:event_rdBtnTimeSeriesFirstNActionPerformed

    private void rdBtnTimeSeriesLastNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtnTimeSeriesLastNActionPerformed
        // TODO add your handling code here:
        rdBtnTimeSeriesFirstN.setSelected(false);
        rdBtnTimeSeriesLastN.setSelected(true);
    }//GEN-LAST:event_rdBtnTimeSeriesLastNActionPerformed
    public void patternMiningCBClicked() {
        // TODO add your handling code here:
        if (jCBPatternMining.isSelected()) {
            jTxtGridX.setEnabled(true);
            jTxtGridY.setEnabled(true);
            jTxtGridZ.setEnabled(true);
            jTxtWindowSize.setEnabled(true);
            
        } else {
            jTxtGridX.setEnabled(false);
            jTxtGridY.setEnabled(false);
            jTxtGridZ.setEnabled(false);
            jTxtWindowSize.setEnabled(false);
            
        }
    }
    private void jCBPatternMiningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBPatternMiningActionPerformed
        patternMiningCBClicked();
    }//GEN-LAST:event_jCBPatternMiningActionPerformed
    public void memCBClicked() {
        // TODO add your handling code here:
        if (!jCBMemReq.isSelected()) {
            btnViewMem.setEnabled(false);
        } else {
            btnViewMem.setEnabled(true);
        }
    }
    private void jCBMemReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBMemReqActionPerformed
        memCBClicked();
    }//GEN-LAST:event_jCBMemReqActionPerformed

    public void accuracyCBClicked() {
        // TODO add your handling code here:
        if (!jCBAccuracy.isSelected()) {
            btnViewAccuracy.setEnabled(false);
        } else {
            btnViewAccuracy.setEnabled(true);
        }
    }
    private void jCBAccuracyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAccuracyActionPerformed
        accuracyCBClicked();
    }//GEN-LAST:event_jCBAccuracyActionPerformed

    private void jbtnExportResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnExportResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnExportResultActionPerformed

    private void jbtnExportConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnExportConfigurationActionPerformed
        try {
            // TODO add your handling code here:
            PrintWriter pw = new PrintWriter(new File(jtxtOutputFilePath.getText()));
            pw.write("Approaches\n");
            if(jCBFeatureBased.isSelected())
                pw.write("FeatureBased\n");
            if(jCBTimeSeries.isSelected())
                pw.write("TimeSeriesSimilarity\n");
            if(jCBPatternMining.isSelected())
                pw.write("FrequentPatternBased\n");
            
            pw.write("End of Approaches\n");
            pw.write("Datasetpath," + jTxtTestingFolder.getText() + "\n");
            pw.write("TrainingObjects," + jTxtNumIndividualsTrain.getText() + "\n");
            pw.write("TestingObjects," + jTxtNumIndividualsTest.getText() + "\n");
            pw.write("Instances," + jTxtNumInstances.getText() + "\n");
            pw.write("FrameStepRate,"+jTxtFrameStepRate.getText()+"\n");
            int[] selarr=jLstSelSeries.getSelectedIndices();
            String temp="";
            for(int i=0;i<selarr.length-1;i++)
                temp+=selarr[i]+"-";
            temp+=selarr[selarr.length-1];
            pw.write("SeriesToConsider,"+temp+"\n");
            pw.write("IsFeatureBasedSelected," + jCBFeatureBased.isSelected() + "\n");
            pw.write("IsHorizontalRangeSelected," + jCBHorizontalRange.isSelected() + "\n");
            pw.write("IsVerticalRangeSelected," + jCBVerticalRange.isSelected() + "\n");
            pw.write("IsMeanSelected," + jCBMean.isSelected() + "\n");
            pw.write("IsStdDevSelected," + jCBStdDev.isSelected() + "\n");
            pw.write("IsEDSelectedForFeatureBased," + rdBtnFeatureED.isSelected() + "\n");
            pw.write("IsTimeSeriesSelected," + jCBTimeSeries.isSelected() + "\n");
            pw.write("IsPatternBasedSelected," + jCBPatternMining.isSelected() + "\n");
            pw.write("IsEDSelectedForTimeSeries," + rdBtnTimeSeriesED.isSelected() + "\n");
            pw.write("IsFirstNSelectedForTimeSeries," + rdBtnTimeSeriesFirstN.isSelected() + "\n");
            pw.write("SlidingWinSize," + jTxtWindowSize.getText() + "\n");
            pw.write("MinSupport,"+jTxtMinSup.getText()+"\n");
            pw.write("X," + jTxtGridX.getText() + "\n");
            pw.write("Y," + jTxtGridY.getText() + "\n");
            pw.write("Z," + jTxtGridZ.getText() + "\n");
            pw.write("IsAccuracySelected," + jCBAccuracy.isSelected() + "\n");
            pw.write("IsMemorySelected," + jCBMemReq.isSelected() + "\n");
            pw.write("IsTimeToTrainSelected," + jCBTimeReqTrain.isSelected() + "\n");
            pw.write("IsTimeToTestSelected," + jCBTimeReqTest.isSelected() + "\n");
            pw.close();
            UtilityClass.displaySimpleMessageBox("Configuration Successfully Exported!");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindowAttemptOne.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbtnExportConfigurationActionPerformed

    public void applyConfiguration(String[] input) {
        switch (input[0]) {
            case "Datasetpath":
                jTxtTestingFolder.setText(input[1]);
                break;
            case "TrainingObjects":
                jTxtNumIndividualsTrain.setText(input[1]);
                break;
            case "TestingObjects":
                jTxtNumIndividualsTest.setText(input[1]);
                break;
            case "FrameStepRate":
                jTxtFrameStepRate.setText(input[1]);
                break;
            case "SeriesToConsider":
                String[] temparr=input[1].split("-");
                int[] selind=new int[temparr.length];
                for(int i=0;i<selind.length;i++)
                    selind[i]=Integer.parseInt(temparr[i]);
                jLstSelSeries.setSelectedIndices(selind);
                break;
            case "Instances":
                jTxtNumInstances.setText(input[1]);
                break;
            case "IsFeatureBasedSelected":
                if (input[1].toLowerCase().equals("true") && !jCBFeatureBased.isSelected()) {
                    jCBFeatureBased.setSelected(true);
                    featureBasedCBClicked();
                } else if (input[1].toLowerCase().equals("false") && jCBFeatureBased.isSelected()) {
                    jCBFeatureBased.setSelected(false);
                    featureBasedCBClicked();
                }
                break;
            case "IsStrideLengthSelected":
                if (input[1].toLowerCase().equals("true")) {
                    jCBHorizontalRange.setSelected(true);
                } else {
                    jCBHorizontalRange.setSelected(false);
                }
                break;
            case "IsGaitCycleTimeSelected":
                if (input[1].toLowerCase().equals("true")) {
                    jCBVerticalRange.setSelected(true);
                } else {
                    jCBVerticalRange.setSelected(false);
                }
                break;
            case "IsVelocitySelected":
                if (input[1].equals("true")) {
                    jCBMean.setSelected(true);
                } else {
                    jCBMean.setSelected(false);
                }
                break;
            case "IsHeightSelected":
                if (input[1].equals("true")) {

                } else {

                }
                break;
            case "IsStdDevSelected":
                if (input[1].equals("true")) {
                    jCBStdDev.setSelected(true);
                } else {
                    jCBStdDev.setSelected(false);
                }
                break;
            case "IsEDSelectedForFeatureBased":
                if (input[1].equals("true")) {
                    rdBtnFeatureED.setSelected(true);
                    rdBtnFeatureManhattan.setSelected(false);
                } else {
                    rdBtnFeatureED.setSelected(false);
                    rdBtnFeatureManhattan.setSelected(true);
                }
                break;
            case "IsTimeSeriesSelected":
                if (input[1].equals("true") && !jCBTimeSeries.isSelected()) {
                    jCBTimeSeries.setSelected(true);
                    timeSeriesCBClicked();
                } else if (input[1].equals("false") && jCBTimeSeries.isSelected()) {
                    jCBTimeSeries.setSelected(false);
                    timeSeriesCBClicked();
                }
                break;
            case "IsPatternBasedSelected":
                if (input[1].equals("true") && !jCBPatternMining.isSelected()) {
                    jCBPatternMining.setSelected(true);
                    patternMiningCBClicked();
                } else if (input[1].equals("false") && jCBPatternMining.isSelected()) {
                    jCBPatternMining.setSelected(false);
                    patternMiningCBClicked();
                }
                break;
            case "IsEDSelectedForTimeSeries":
                if (input[1].equals("true")) {
                    edRdbClicked();
                } else {
                    dtwRdbClicked();
                }
                break;
            case "IsFirstNSelectedForTimeSeries":
                if (input[1].equals("true")) {
                    rdBtnTimeSeriesFirstN.setSelected(true);
                    rdBtnTimeSeriesLastN.setSelected(false);
                } else {
                    rdBtnTimeSeriesFirstN.setSelected(false);
                    rdBtnTimeSeriesLastN.setSelected(true);
                }
                break;
            case "MinSupport":
                jTxtMinSup.setText(input[1]);
                break;
            case "SlidingWinSize":
                jTxtWindowSize.setText(input[1]);
                break;
           
            case "X":
                jTxtGridX.setText(input[1]);
                break;
            case "Y":
                jTxtGridY.setText(input[1]);
                break;
            case "Z":
                jTxtGridZ.setText(input[1]);
                break;
            case "IsAccuracySelected":
                if (input[1].equals("true") && !jCBAccuracy.isSelected()) {
                    jCBAccuracy.setSelected(true);
                    accuracyCBClicked();
                } else if (input[1].equals("false") && jCBAccuracy.isSelected()) {
                    jCBAccuracy.setSelected(false);
                    accuracyCBClicked();
                }
                break;
            case "IsMemorySelected":
                if (input[1].equals("true") && !jCBMemReq.isSelected()) {
                    jCBMemReq.setSelected(true);
                    memCBClicked();
                } else if (input[1].equals("false") && jCBMemReq.isSelected()) {
                    jCBMemReq.setSelected(false);
                    memCBClicked();
                }
                break;
            case "IsTimeToTrainSelected":
                if (input[1].equals("true") && !jCBTimeReqTrain.isSelected()) {
                    jCBTimeReqTrain.setSelected(true);
                    timeCBClicked();
                } else if (input[1].equals("false") && jCBTimeReqTrain.isSelected()) {
                    jCBTimeReqTrain.setSelected(false);
                    timeCBClicked();
                }
                break;
            case "IsTimeToTestSelected":
                if (input[1].equals("true") && !jCBTimeReqTest.isSelected()) {
                    jCBTimeReqTest.setSelected(true);
                    timeTestCBClicked();
                } else if (input[1].equals("false") && jCBTimeReqTest.isSelected()) {
                    jCBTimeReqTest.setSelected(false);
                    timeTestCBClicked();
                }
                break;
            default:
                break;
        }
    }

    public void importconfig() {
        try {
            // TODO add your handling code here:
            Scanner sc = new Scanner(new File(jtxtOutputFilePath.getText()));
            
            while (sc.hasNext()) {
                
                String line = sc.nextLine();
                if(line.equals("Approaches,")){
                    while(!line.equals("End of Approaches,")){
                        line=sc.nextLine();
                        
                    }
                    continue;
                }
                String[] splitline = line.split(",");
                System.out.println(line);
                applyConfiguration(splitline);
                GlobalConfig.extraParameters.put(splitline[0], splitline[1]);
            }
            UtilityClass.displaySimpleMessageBox("Configuration successfully loaded!");
            System.out.println("Extra Parameters Saved:" + GlobalConfig.extraParameters.toString());
            sc.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindowAttemptOne.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }

    }
    private void jbtnImportConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnImportConfigurationActionPerformed
        importconfig();
    }//GEN-LAST:event_jbtnImportConfigurationActionPerformed

    private void jCBStdDevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBStdDevActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBStdDevActionPerformed

    private void jCBMeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBMeanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBMeanActionPerformed

    private void jCBVerticalRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBVerticalRangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBVerticalRangeActionPerformed

    private void jCBHorizontalRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBHorizontalRangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBHorizontalRangeActionPerformed

    private void jtxtNumSeriesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtNumSeriesFocusLost
        // TODO add your handling code here:
        try {
            GlobalConfig.totalNumberOfSeries = Integer.parseInt(jtxtNumSeries.getText());
            String[] lstData = new String[GlobalConfig.totalNumberOfSeries];
            int[] selindices = new int[GlobalConfig.totalNumberOfSeries];
            for (int i = 0; i < GlobalConfig.totalNumberOfSeries; i++) {
                lstData[i] = "Series " + (i + 1);
                selindices[i] = i;
            }
            jLstSelSeries.setListData(lstData);
            jLstSelSeries.setSelectedIndices(selindices);

        } catch (Exception ex) {
            UtilityClass.displaySimpleMessageBox("Value in Number of Series must be a Number");
        }
    }//GEN-LAST:event_jtxtNumSeriesFocusLost

    private void jtxtNumSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtNumSeriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtNumSeriesActionPerformed

    private void jLstSelSeriesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLstSelSeriesValueChanged
        // TODO add your handling code here:
        int[] temparr = jLstSelSeries.getSelectedIndices();
        for (int i = 0; i < temparr.length; i++) {
            // GlobalConfig.selectedSeries.add(temparr[i]);
        }
    }//GEN-LAST:event_jLstSelSeriesValueChanged

    /**
     * @param args the command line arguments
     */
    public static String dir = "";

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindowAttemptOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindowAttemptOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindowAttemptOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindowAttemptOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MainWindowAttemptOne m = new MainWindowAttemptOne();
                m.setLocationRelativeTo(null);
                m.setVisible(true);
                m.getContentPane().setBackground(Color.white);
                if (dir.length() != 0) {
                    m.jtxtOutputFilePath.setText(dir);
                    m.importconfig();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewAccuracy;
    private javax.swing.JButton btnViewMem;
    private javax.swing.JButton btnViewTime;
    private javax.swing.JButton jBtnExecuteExperiment;
    private javax.swing.JCheckBox jCBAccuracy;
    private javax.swing.JCheckBox jCBFeatureBased;
    private javax.swing.JCheckBox jCBHorizontalRange;
    private javax.swing.JCheckBox jCBMean;
    private javax.swing.JCheckBox jCBMemReq;
    private javax.swing.JCheckBox jCBPatternMining;
    private javax.swing.JCheckBox jCBStdDev;
    private javax.swing.JCheckBox jCBTimeReqTest;
    private javax.swing.JCheckBox jCBTimeReqTrain;
    private javax.swing.JCheckBox jCBTimeSeries;
    private javax.swing.JCheckBox jCBVerticalRange;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jLstSelSeries;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTextField jTxtFrameStepRate;
    private javax.swing.JTextField jTxtGridX;
    private javax.swing.JTextField jTxtGridY;
    private javax.swing.JTextField jTxtGridZ;
    private javax.swing.JTextField jTxtMinSup;
    private javax.swing.JTextField jTxtNumIndividualsTest;
    private javax.swing.JTextField jTxtNumIndividualsTrain;
    private javax.swing.JTextField jTxtNumInstances;
    private javax.swing.JTextField jTxtTestingFolder;
    private javax.swing.JTextField jTxtWindowSize;
    private javax.swing.JButton jbtnExportConfiguration;
    private javax.swing.JButton jbtnExportResult;
    private javax.swing.JButton jbtnImportConfiguration;
    private javax.swing.JTextField jtxtNumSeries;
    private javax.swing.JTextField jtxtOutputFilePath;
    private javax.swing.JRadioButton rdBtnFeatureED;
    private javax.swing.JRadioButton rdBtnFeatureManhattan;
    private javax.swing.JRadioButton rdBtnTimeSeriesDTW;
    private javax.swing.JRadioButton rdBtnTimeSeriesED;
    private javax.swing.JRadioButton rdBtnTimeSeriesFirstN;
    private javax.swing.JRadioButton rdBtnTimeSeriesLastN;
    // End of variables declaration//GEN-END:variables
}
